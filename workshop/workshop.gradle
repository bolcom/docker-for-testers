import java.text.SimpleDateFormat

plugins {
    id "org.asciidoctor.convert" version "1.5.3"
    id "com.github.jruby-gradle.base" version "1.5.0"
    id "distribution"
}

dependencies {
    gems 'rubygems:asciidoctor-diagram:1.5.1'
}

def imageName = "registry.dev.bol.com/training-it/training-template"
def dockerBuildDir = "${buildDir}/docker"
def dockerContainerName = rootProject.name - ~/[^a-zA-Z0-9_]/
def asciidoctorOutputDir = "$buildDir/asciidoc"

def excludePatterns = [
        '**/target/**',
        '**/.asciidoctor/**',
        '**/diag-*.png*',
        '**/build/**',
        '**/.idea',
        '**/*.iml',
]

asciidoctorj { version = '1.5.4.1' }
asciidoctor {
    attributes \
        'project-name': rootProject.name

    sourceDir = rootDir
    sources {
        ['labs', projectDir.name].each { dir ->
            include "**/${dir}/**/*.adoc"
            excludePatterns.each { pattern ->
                exclude "${dir}/${pattern}"
            }
        }
    }
    resources {
        from(projectDir) {
            include '/src/asciidoc/images/**'
            include '/src/asciidoc/js/**'
            include '/src/asciidoc/css/**'
            include '/src/asciidoc/screencast/**'
            excludePatterns.each { pattern ->
                exclude "${pattern}"
            }
        }
        into project.name
    }
    outputDir = file(asciidoctorOutputDir)

    backends 'html5'
    options doctype: 'book'
    attributes 'source-highlighter': 'coderay',
            toc: 'left',
            icons: 'font',
            idprefix: '',
            idseparator: '-',
            sectnums: ''

    dependsOn jrubyPrepare
    gemPath = jrubyPrepare.outputDir
    requires = ['asciidoctor-diagram']
}
asciidoctor.doLast {
    copy {
        // put the index.html in the root of the ${rootProject.name}
        from("$asciidoctorOutputDir/html5/$project.name/src/asciidoc") {
            include '**/index.html'
            includeEmptyDirs false
            eachFile { FileCopyDetails details ->
                details.path = details.name
            }
        }
        into file("$dockerBuildDir/${rootProject.name}")
    }
    copy {
        // put the images directory in the root of the ${rootProject.name}
        from("$asciidoctorOutputDir/html5/$project.name/src/asciidoc") {
            include 'images/**/*'
            include 'js/**/*'
            include 'css/**/*'
            include 'screencast/**/*'
            includeEmptyDirs false
            eachFile { FileCopyDetails details ->
                details.path = details.relativeSourcePath
            }
        }
        into file("$dockerBuildDir/${rootProject.name}")
    }
    copy {
        // Add the labs and solutions,
        // and their html versions of the asciidoctor files
        // in the root of the ${rootProject.name}
        from("$asciidoctorOutputDir/html5") {
            ['labs'].each {
                include "${it}/**/*.html"
            }
            includeEmptyDirs false
        }
        from(rootDir) {
            ['labs', 'docker-images', 'selenium-grid-docker'].each { dir ->
                include "${dir}/**"
                excludePatterns.each { pattern ->
                    exclude "${dir}/${pattern}"
                }
                exclude "${dir}/**/*.adoc"
            }
            includeEmptyDirs false
        }
        into file("$dockerBuildDir/${rootProject.name}")
    }
}
build.dependsOn asciidoctor

clean {
    delete(fileTree(rootDir) {
        ['labs', projectDir.name].each { dir ->
            excludePatterns.each { pattern ->
                include "${dir}/${pattern}"
            }
        }
    })
}

distributions {
    main {
        def buildDate = new SimpleDateFormat("YYYY-MM-dd-HHmm").format(new Date())
        baseName = "${buildDate}-${rootProject.name}"
        contents {
            from "$dockerBuildDir/${rootProject.name}"
        }
    }
}